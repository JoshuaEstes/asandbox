<?php

/**
 * BaseaBlogItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property enum $type
 * @property integer $author_id
 * @property integer $category_id
 * @property string $title
 * @property string $excerpt
 * @property clob $body
 * @property boolean $published
 * @property timestamp $published_at
 * @property string $media
 * @property date $start_date
 * @property time $start_time
 * @property date $end_date
 * @property time $end_time
 * @property sfGuardUser $Author
 * @property aBlogCategory $Category
 * 
 * @method integer       getId()           Returns the current record's "id" value
 * @method enum          getType()         Returns the current record's "type" value
 * @method integer       getAuthorId()     Returns the current record's "author_id" value
 * @method integer       getCategoryId()   Returns the current record's "category_id" value
 * @method string        getTitle()        Returns the current record's "title" value
 * @method string        getExcerpt()      Returns the current record's "excerpt" value
 * @method clob          getBody()         Returns the current record's "body" value
 * @method boolean       getPublished()    Returns the current record's "published" value
 * @method timestamp     getPublishedAt()  Returns the current record's "published_at" value
 * @method string        getMedia()        Returns the current record's "media" value
 * @method date          getStartDate()    Returns the current record's "start_date" value
 * @method time          getStartTime()    Returns the current record's "start_time" value
 * @method date          getEndDate()      Returns the current record's "end_date" value
 * @method time          getEndTime()      Returns the current record's "end_time" value
 * @method sfGuardUser   getAuthor()       Returns the current record's "Author" value
 * @method aBlogCategory getCategory()     Returns the current record's "Category" value
 * @method aBlogItem     setId()           Sets the current record's "id" value
 * @method aBlogItem     setType()         Sets the current record's "type" value
 * @method aBlogItem     setAuthorId()     Sets the current record's "author_id" value
 * @method aBlogItem     setCategoryId()   Sets the current record's "category_id" value
 * @method aBlogItem     setTitle()        Sets the current record's "title" value
 * @method aBlogItem     setExcerpt()      Sets the current record's "excerpt" value
 * @method aBlogItem     setBody()         Sets the current record's "body" value
 * @method aBlogItem     setPublished()    Sets the current record's "published" value
 * @method aBlogItem     setPublishedAt()  Sets the current record's "published_at" value
 * @method aBlogItem     setMedia()        Sets the current record's "media" value
 * @method aBlogItem     setStartDate()    Sets the current record's "start_date" value
 * @method aBlogItem     setStartTime()    Sets the current record's "start_time" value
 * @method aBlogItem     setEndDate()      Sets the current record's "end_date" value
 * @method aBlogItem     setEndTime()      Sets the current record's "end_time" value
 * @method aBlogItem     setAuthor()       Sets the current record's "Author" value
 * @method aBlogItem     setCategory()     Sets the current record's "Category" value
 * 
 * @package    asandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseaBlogItem extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('a_blog_item');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'post',
              1 => 'event',
             ),
             'notnull' => true,
             ));
        $this->hasColumn('author_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('category_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('excerpt', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('body', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('published', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('published_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('media', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('start_date', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('start_time', 'time', null, array(
             'type' => 'time',
             ));
        $this->hasColumn('end_date', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('end_time', 'time', null, array(
             'type' => 'time',
             ));

        $this->setSubClasses(array(
             'aBlogPost' => 
             array(
              'type' => 'post',
             ),
             'aBlogEvent' => 
             array(
              'type' => 'event',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as Author', array(
             'local' => 'author_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('aBlogCategory as Category', array(
             'local' => 'category_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $taggable0 = new Taggable();
        $sluggable0 = new Doctrine_Template_Sluggable();
        $versionable0 = new Doctrine_Template_Versionable(array(
             'versionColumn' => 'version',
             'className' => '%CLASS%Version',
             'auditLog' => true,
             'deleteVersions' => true,
             ));
        $this->actAs($timestampable0);
        $this->actAs($taggable0);
        $this->actAs($sluggable0);
        $this->actAs($versionable0);
    }
}